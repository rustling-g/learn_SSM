<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.com.dao.IUserDao">

    <!-- 定义user的resultMap -->
    <resultMap id="userMap" type="user">
        <id property="id" column="id"></id>
        <!--        property表示实体类中定义的对象名称，column表示下方sql语句中的别名/sql表中的正式名字。二者应该尽量保持一致-->
        <result property="username" column="username"></result>
        <result property="sex" column="sex"></result>
        <result property="address" column="address"></result>
        <result property="birthday" column="birthday"></result>
        <!-- 配置user对象中account集合的映射 -->
        <collection property="accounts" ofType="account">
            <id property="id" column="aid"></id>
            <result property="uid" column="uid"></result>
            <result property="money" column="money"></result>
        </collection>
        <!-- 配置user对象中Role集合的映射 -->
        <collection property="roles" ofType="role">
            <id property="id" column="rid"></id>
            <result property="roleName" column="role_name"></result>
            <result property="roleDesc" column="role_desc"></result>
        </collection>
    </resultMap>

    <!-- 查询所有，且包含角色 多对多的查询操作-->
    <select id="findAllRoles" resultMap="userMap">
        select u.* , r.id as rid, r.role_desc, r.role_name from user u
        left outer join user_role ur on u.id=ur.uid
        left outer join role r on r.id=ur.rid
    </select>

    <!-- 查询所有，且包含账户 一对多的查询操作-->
    <select id="findAll" resultMap="userMap">
        select * from user u left outer join account a on a.uid=u.id
    </select>

    <!-- 插入 -->
    <insert id="saveUser" parameterType="User">
--      mysql自增主键的返回：
--          keyProperty 要返回的值的名称
--          order       插入前/插入后操作
        <selectKey keyProperty="id" keyColumn="id" order="AFTER" resultType="java.lang.Integer" >
            select last_insert_id();
        </selectKey>
        insert into user(username,address,sex,birthday) values(#{username},#{address},#{sex},#{birthday});
    </insert>

    <!-- 更新 -->
    <update id="updateUser" parameterType="User">
        update user set username=#{username},address=#{address},sex=#{sex},birthday=#{birthday} where id=#{id};
    </update>

    <!-- 删除 -->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id=#{uid};
    </delete>

    <!-- 查询一个 -->
    <select id="findById" parameterType="java.lang.Integer" resultType="user">
        select * from user where id=#{uid};
    </select>

    <!-- 根据名称模糊查询 -->
    <select id="findByName" parameterType="String" resultType="USER">
        select * from user where username like "%"#{uname}"%";
    </select>

    <!--获取用户的总记录条数-->
    <select id="findTotal" resultType="java.lang.Integer">
        select count(id) from user;
    </select>

    <!--根据条件查询-->
    <select id="findByCondition" resultType="User" parameterType="user" >
        select * from user
        <where>
            <if test="username != null">
                and username = #{username}
            </if>
            <if test="sex != null">
                and sex = #{sex}
            </if>
        </where>
    </select>

    <!-- 根据queryVO中的id集合来查询 -->
    <select id="findUserInIds" resultType="User" parameterType="queryVo">
        select * from user
        <where>
            <if test="ids != null  and ids. size()>0">
                <foreach collection="ids" open="and id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>

</mapper>